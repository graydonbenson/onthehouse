// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class SignupTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void testSignupInvalidEmail() {
    // Test name: TestSignupInvalidEmail
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://seng-401-on-the-house.web.app/");
    // 2 | setWindowSize | 1735x750 | 
    driver.manage().window().setSize(new Dimension(1735, 750));
    // 3 | click | css=.MuiButton-containedInfo | 
    driver.findElement(By.cssSelector(".MuiButton-containedInfo")).click();
    // 4 | click | id=fullName | 
    driver.findElement(By.id("fullName")).click();
    // 5 | type | id=fullName | Testing Account
    driver.findElement(By.id("fullName")).sendKeys("Testing Account");
    // 6 | click | id=email | 
    driver.findElement(By.id("email")).click();
    // 7 | type | id=email | invalidemail
    driver.findElement(By.id("email")).sendKeys("invalidemail");
    // 8 | click | id=username | 
    driver.findElement(By.id("username")).click();
    // 9 | type | id=username | testingaccount
    driver.findElement(By.id("username")).sendKeys("testingaccount");
    // 10 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 11 | mouseOver | css=.MuiButtonBase-root | 
    {
      WebElement element = driver.findElement(By.cssSelector(".MuiButtonBase-root"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 12 | type | id=password | testingaccountpassword
    driver.findElement(By.id("password")).sendKeys("testingaccountpassword");
    // 13 | click | css=.MuiButtonBase-root | 
    driver.findElement(By.cssSelector(".MuiButtonBase-root")).click();
    // 14 | mouseOver | css=.MuiButton-root | 
    {
      WebElement element = driver.findElement(By.cssSelector(".MuiButton-root"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 15 | mouseOut | css=.MuiButton-root | 
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 16 | waitForElementPresent | css=.MuiAlert-root | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".MuiAlert-root")));
    }
    // 17 | assertText | css=.MuiAlert-message | auth/invalid-email
    assertThat(driver.findElement(By.cssSelector(".MuiAlert-message")).getText(), is("auth/invalid-email"));
  }
  @Test
  public void testSignupInvalidPassword() {
    // Test name: TestSignupInvalidPassword
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://seng-401-on-the-house.web.app/");
    // 2 | setWindowSize | 1735x750 | 
    driver.manage().window().setSize(new Dimension(1735, 750));
    // 3 | click | css=.MuiButton-containedInfo | 
    driver.findElement(By.cssSelector(".MuiButton-containedInfo")).click();
    // 4 | click | id=fullName | 
    driver.findElement(By.id("fullName")).click();
    // 5 | type | id=fullName | Testing Account
    driver.findElement(By.id("fullName")).sendKeys("Testing Account");
    // 6 | click | id=email | 
    driver.findElement(By.id("email")).click();
    // 7 | type | id=email | testingaccount@gmail.com
    driver.findElement(By.id("email")).sendKeys("testingaccount@gmail.com");
    // 8 | click | id=username | 
    driver.findElement(By.id("username")).click();
    // 9 | type | id=username | testingaccount
    driver.findElement(By.id("username")).sendKeys("testingaccount");
    // 10 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 11 | mouseOver | css=.MuiButtonBase-root | 
    {
      WebElement element = driver.findElement(By.cssSelector(".MuiButtonBase-root"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 12 | type | id=password | test
    driver.findElement(By.id("password")).sendKeys("test");
    // 13 | click | css=.MuiButtonBase-root | 
    driver.findElement(By.cssSelector(".MuiButtonBase-root")).click();
    // 14 | mouseOver | css=.MuiButton-root | 
    {
      WebElement element = driver.findElement(By.cssSelector(".MuiButton-root"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 15 | mouseOut | css=.MuiButton-root | 
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 16 | waitForElementPresent | css=.MuiAlert-root | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".MuiAlert-root")));
    }
    // 17 | assertText | css=.MuiAlert-message | auth/weak-password
    assertThat(driver.findElement(By.cssSelector(".MuiAlert-message")).getText(), is("auth/weak-password"));
  }
  @Test
  public void testSignupValid() {
    // Test name: TestSignupValid
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://seng-401-on-the-house.web.app/");
    // 2 | click | css=.MuiButton-containedInfo | 
    driver.findElement(By.cssSelector(".MuiButton-containedInfo")).click();
    // 3 | type | id=fullName | Testing Account
    driver.findElement(By.id("fullName")).sendKeys("Testing Account");
    // 4 | click | id=email | 
    driver.findElement(By.id("email")).click();
    // 5 | type | id=email | testingaccount@gmail.com
    driver.findElement(By.id("email")).sendKeys("testingaccount@gmail.com");
    // 6 | type | id=username | testingaccount
    driver.findElement(By.id("username")).sendKeys("testingaccount");
    // 7 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 8 | type | id=password | testingaccountpassword
    driver.findElement(By.id("password")).sendKeys("testingaccountpassword");
    // 9 | click | css=.MuiButtonBase-root | 
    driver.findElement(By.cssSelector(".MuiButtonBase-root")).click();
    // 10 | waitForElementPresent | xpath=//h1[contains(.,'Sign in')] | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//h1[contains(.,\'Sign in\')]")));
    }
    // 11 | type | id=email | testingaccount@gmail.com
    driver.findElement(By.id("email")).sendKeys("testingaccount@gmail.com");
    // 12 | click | id=password | 
    driver.findElement(By.id("password")).click();
    // 13 | type | id=password | testingaccountpassword
    driver.findElement(By.id("password")).sendKeys("testingaccountpassword");
    // 14 | click | css=.MuiButton-root | 
    driver.findElement(By.cssSelector(".MuiButton-root")).click();
    // 15 | assertText | xpath=//button[2] | LOGOUT
    assertThat(driver.findElement(By.xpath("//button[2]")).getText(), is("LOGOUT"));
  }
}
